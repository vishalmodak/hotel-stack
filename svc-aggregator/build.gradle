buildscript {
    ext {
        springBootVersion = '1.5.2.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
        classpath("io.spring.gradle:dependency-management-plugin:0.4.1.RELEASE")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea' 
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

jar {
    baseName = 'svc-aggregator'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven {
        url "http://oss.jfrog.org/artifactory/oss-release-local" //repo url for swagger-mvc-ui
    }
}


dependencies {
    compile('org.springframework.cloud:spring-cloud-starter-zipkin:1.1.3.RELEASE')
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile 'org.springframework.cloud:spring-cloud-starter-feign:1.2.6.RELEASE'
    compile 'com.google.code.gson:gson:2.3.1'
    compile 'org.springframework.cloud:spring-cloud-starter-hystrix:1.2.6.RELEASE'
    compile("io.springfox:springfox-swagger2:2.5.0")
    compile("io.springfox:springfox-swagger-ui:2.5.0")
    testCompile("org.springframework.boot:spring-boot-starter-test") 
}


//To run the Eureka server as an executable JAR (or WAR) using the Spring Boot build tools, 
//but to avoid problems with classpath scanning in Jersey 1.x you have to tell the build plugins to unpack the jars that contain JAX-RS resources, e.g. (for Maven)
springBoot {
    requiresUnpack = ['com.netflix.eureka:eureka-core','com.netflix.eureka:eureka-client']
}

eclipse {
    classpath {
         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}
